---

- name: Gather default and custom facts
  hosts: 'all:!localhost'
  gather_facts: True
  sudo: False

  tasks:

    - name: Check IP address of Ansible Controller
      set_fact:
        ansible_controller: '{{ ansible_env.SSH_CLIENT.split(" ") | first }}'
      when: (ansible_controller is undefined and ansible_connection != "local")
      tags: [ 'ferm', 'tcpwrappers' ]


- name: Prepare base environment
  hosts: 'all:!localhost'
  gather_facts: False
  sudo: True

  vars:

    # Flags are used to globally modify behaviour of DebOps roles.
    # Roles can check for presence or absence of a particular flag in
    # 'ansible_local.root.flags' list and act accordingly, for example omitting
    # or executing certain tasks.
    # Flags can only be appended by Ansible. To remove them, you need to modify
    # or remove the flags list from Ansible local facts.
    root_flags_combined: '{{ root_flags|d([]) + root_group_flags|d([]) + root_host_flags|d([]) }}'

    # Source variable of a random UUID generated at the time of first DebOps
    # run on a new host and stored in Ansible local facts. UUID can be accessed
    # as 'ansible_local.root.uuid'
    root_uuid_random_source: '{{ root_uuid_random | default(lookup("pipe","uuidgen")) }}'

    # These variables can be used by Ansible roles to specify common root
    # directories for various types of data. They should be accessed using
    # Ansible local facts, in 'ansible_local.root' hierarchy. Roles expect them
    # to exist, otherwise it's an error and Ansible should stop execution.
    # You can override these variables in Ansible inventory.
    root_service_directories:

        # Path for local Ansible Facts
      - path: '/etc/ansible/facts.d'
        fact: 'facts'

        # Path for local service binaries
      - path: '{{ root_service_bin   | default("/usr/local/bin") }}'
        fact: 'bin'

        # Path for local service configuration
      - path: '{{ root_service_etc   | default("/usr/local/etc") }}'
        fact: 'etc'

        # Path for service static library directories
      - path: '{{ root_service_lib   | default("/usr/local/lib") }}'
        fact: 'lib'

        # Path for local service privileged binaries
      - path: '{{ root_service_sbin   | default("/usr/local/sbin") }}'
        fact: 'sbin'

        # Path for service static data
      - path: '{{ root_service_share  | default("/usr/local/share") }}'
        fact: 'share'

        # Path for local sources (cloned git repositories, etc.)
      - path: '{{ root_service_src    | default("/usr/local/src") }}'
        fact: 'src'

        # Path for local data directories
      - path: '{{ root_service_data   | default("/srv")         }}'
        fact: 'data'

        # Path for automatic and manual backups
      - path: '{{ root_service_backup | default("/var/backups") }}'
        fact: 'backup'

        # Path for local service home directories and internal state data
      - path: '{{ root_service_home   | default("/var/local") }}'
        fact: 'home'

        # Path where applications are installed (on their user accounts)
      - path: '{{ root_service_app    | default("/var/local") }}'
        fact: 'app'

  tasks:

    - name: Create root directories
      file:
        path: '{{ hostvars[inventory_hostname]["ansible_local"]["root"][item.fact] if (hostvars[inventory_hostname]["ansible_local"] is defined and hostvars[inventory_hostname]["ansible_local"]["root"] is defined and hostvars[inventory_hostname]["ansible_local"]["root"][item.fact] is defined) else item.path }}'
        state: 'directory'
      with_items: root_service_directories

    - name: Read the host UUID
      shell: dmidecode --string system-uuid | tail -n 1 || true
      register: root_register_uuid
      changed_when: False

    - name: Save root local facts
      template:
        src: 'templates/etc/ansible/facts.d/root.fact.j2'
        dest: '/etc/ansible/facts.d/root.fact'
        owner: 'root'
        group: 'root'
        mode: '0644'

    - name: Install custom Ansible local facts
      copy:
        src: 'files/etc/ansible/facts.d/'
        dest: '/etc/ansible/facts.d/'
        owner: 'root'
        group: 'root'
        mode: '0755'

    - name: Update APT cache and install required packages
      apt:
        name: '{{ item }}'
        state: 'present'
        install_recommends: False
        update_cache: True
        cache_valid_time: '{{ root_apt_cache_valid_time | default(60 * 60 * 24) }}'
      with_items: [ 'libcap2-bin' ]

